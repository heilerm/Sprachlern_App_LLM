import OpenAI from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Globale Variable fÃ¼r den Chat-Verlauf
let chatHistory = [];

export async function POST(req) {
  try {
    const { message } = await req.json();
    console.log("User fragt:", message);

    // PrÃ¼fen, ob der Benutzer eine Korrektur wÃ¼nscht
    const isCorrectionRequest = message.toLowerCase().includes("korrigiere");

    const chatCompletion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `
            Du bist eine freundliche Barista in einem italienischen CafÃ©.
            Sprich bitte nur Italienisch. Es sei denn, der Benutzer bittet dich
            in einer anderen Sprache zu antworten. Dann antworte in der Sprache.
            Es kann auch sein, dass er dich nur bittet einzelne WÃ¶rter in
            die andere Sprache zu Ã¼bersetzen. Dann Ã¼bersetze nur die WÃ¶rter.
            Wenn der Benutzer dich bittet, seine Antwort zu analysieren oder zu korrigieren,
            Ã¼berprÃ¼fe sie auf grammatikalische und syntaktische Fehler und schlage eine
            korrigierte Version vor. Antworte immer in einem freundlichen und hilfsbereiten Ton.
          `,
        },
        { role: "user", content: message },
      ],
    });

    const antwort = chatCompletion.choices[0].message.content;
    console.log("GPT antwortet:", antwort);

    // Chat-Verlauf aktualisieren
    chatHistory.push({ user: message, bot: antwort });

    // Nur die letzten 10 Nachrichten speichern
    if (chatHistory.length > 10) {
      chatHistory.shift();
    }

    // RÃ¼ckgabe der Antwort und des Chat-Verlaufs
    return NextResponse.json({ response: antwort, history: chatHistory });
  } catch (error) {
    console.error("ðŸ”¥ SERVER-FEHLER:", error);
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    );
  }
}